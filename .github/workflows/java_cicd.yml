
name: CICD JAVA WITH SONAR QUBE

on:
  push:
    branches: [ "master" ]
    
jobs:
  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn package --file pom.xml

    - uses: actions/upload-artifact@v4
      with:
        name: my-artifact
        path: target/*.jar

    - name: Trivy Scan
      run:
        trivy fs --format table -o trivy-fs-report.html .
    - name: Official SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v3.0.0
            
      # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    - name: Intall JQ
      run:
        sudo apt-get update && sudo apt-get install -y jq
    - name: SonarQube Quality Gate Check 
      id: sonarqube-quality-gate-check
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        # Force to fail step after specific time.
      timeout-minutes: 5
      env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL
  
    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    - name: "Example show SonarQube Quality Gate Status value"
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Doker Build Image
      run: docker build -t imishrarohit/boardgame:latest .
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    # - name: Docker push
    - run:
        docker push imishrarohit/boardgame:latest

    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
    - run:
         kubectl -aply -f deployment-service.yaml -n webapps
        
